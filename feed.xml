<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-06-12T21:00:00+02:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Syntax highlighting on your middleman blog</title>
    <link rel="alternate" href="http://blog.url.com/syntax-highlighting-on-your-middleman-blog.html"/>
    <id>http://blog.url.com/syntax-highlighting-on-your-middleman-blog.html</id>
    <published>2016-06-12T21:00:00+02:00</published>
    <updated>2016-06-13T04:10:29+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Syntax highlighting on your middleman blog&lt;/h1&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Blog/static site with middleman&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;1. Step: Add two gems to your Gemfile&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"middleman-syntax"&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"redcarpet"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;middleman-syntax&amp;rdquo; works with all major markdown parsers. I just prefer using redcarpet. Use which ever you like.&lt;/p&gt;

&lt;h3&gt;2. Step: Edit config.rb&lt;/h3&gt;

&lt;p&gt;Add these lines to your config.rb.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;active&lt;/span&gt; &lt;span class="ss"&gt;:syntax&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:markdown_enginge&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redcarpet&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:markdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:fenced_code_blocks&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;smartypants&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;fenced code blocks&amp;rdquo; adds a pretty background to your code blocks so that it differs from plain text on your site. &lt;/p&gt;

&lt;h3&gt;3. Step: Create a file &lt;em&gt;highlighting.css.erb&lt;/em&gt; and put it into &lt;em&gt;/source/stylesheets&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Put this code in the file.&lt;/p&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt; &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="no"&gt;Rouge&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Themes&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:scope&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'.highlight'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;ldquo;Middleman-syntax&amp;rdquo; uses the ruby library &lt;a href="https://github.com/jneen/rouge"&gt;Rouge&lt;/a&gt; by default. Rouge can hightlight 100 different languages and supports several themes like Github, colorful, molokai,monokai, thankful_eyes. I just went with the theme &amp;ldquo;Github&amp;rdquo;.&lt;/p&gt;

&lt;h3&gt;4. Step: You can start writing code now!&lt;/h3&gt;

&lt;p&gt;Ruby example:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#comment&lt;/span&gt;

&lt;span class="vg"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="vg"&gt;$num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="vg"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="vg"&gt;$num&lt;/span&gt;  &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Inside the loop i = &lt;/span&gt;&lt;span class="si"&gt;#$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="vg"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just put your code inside this wrapper:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```ruby
#Your code
```
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>User authentification from scratch in Rails</title>
    <link rel="alternate" href="http://blog.url.com/rails-authentification-from-scratch.html"/>
    <id>http://blog.url.com/rails-authentification-from-scratch.html</id>
    <published>2016-06-10T02:00:00+02:00</published>
    <updated>2016-06-13T11:03:01+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Rails user authentification from scratch&lt;/h1&gt;

&lt;p&gt;In this post, I want to help beginners to get started with user authentification in rails.  &lt;/p&gt;

&lt;p&gt;Firstly, I want to prevent some confusion with authentification vs authorization.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authentification&lt;/strong&gt;&lt;br&gt;
- Who is the user?&lt;br&gt;
- Is the user really he/she pretends to be?&lt;br&gt;
- =&amp;gt; Username + password  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt;&lt;br&gt;
- What is the user allowed to do?&lt;br&gt;
- Has the user permission to access resource X?&lt;br&gt;
- =&amp;gt; Different user roles like admin/normal user/guest/&amp;hellip;&lt;/p&gt;

&lt;h2&gt;Many libraries/gems to choose from&amp;hellip;&lt;/h2&gt;

&lt;p&gt;Indeed, there are quite a lot of libraries out there who help you with user authentification and authorization. But in order to really understand how authentification works, you need to write the code from scratch at least once. That&amp;rsquo;s exactly what I want to show you in this post. At the end I will introduce you to some useful libraries though.&lt;/p&gt;

&lt;p&gt;I assume you know the basics about ruby and rails and won&amp;rsquo;t explain every single line of code. But feel free to ask upcoming questions.&lt;/p&gt;

&lt;h3&gt;Step 0 - Create a new rails app&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="kp"&gt;new&lt;/span&gt; &lt;span class="n"&gt;authentification_from_scratch&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;postgresql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Step 1 - Create a user model&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="n"&gt;password_digest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will use a gem called &amp;ldquo;bicrypt&amp;rdquo; to encrypt our passwords. The Gem requires us to have a attribute &amp;ldquo;password_digest&amp;rdquo;. Therefore watch out for typos!&lt;/p&gt;

&lt;h3&gt;Step 2 - Setup the database&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rake&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="ss"&gt;:create&lt;/span&gt;
&lt;span class="n"&gt;rake&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="ss"&gt;:migrate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Step 3 - Setup some initial routes&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;erb&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="c1"&gt;#root url =&amp;gt; First page after login&lt;/span&gt;
  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'users#show'&lt;/span&gt;

  &lt;span class="c1"&gt;#Url for signup page =&amp;gt; posts form parameters to users#create&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/signup'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'users#new'&lt;/span&gt;

  &lt;span class="c1"&gt;#Form from users#new will post to users#create&lt;/span&gt;
  &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s1"&gt;'/users'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'users#create'&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Step 4 - Create users controller&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Step 5 - Add actions for the previous created routes&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;users_controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;erb&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Step 6 - Create the signup form&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kp"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;erb&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="no"&gt;Signup&lt;/span&gt; &lt;span class="n"&gt;here!&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;
  &amp;lt;%= form_for :user, :url: '/use&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="sx"&gt;%&amp;gt;
    Name: &amp;lt;%= f.text_field :name %&amp;gt;&lt;/span&gt;
    &lt;span class="no"&gt;Email&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;%= f.text_field :email %&amp;gt;
    Password: &amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;password_field&lt;/span&gt; &lt;span class="ss"&gt;:password&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="no"&gt;Password&lt;/span&gt; &lt;span class="no"&gt;Confirmation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;%= f.password_field :password_confirmation %&amp;gt;
    &amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submit&lt;/span&gt; &lt;span class="s2"&gt;"Submit"&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;% end &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The password_confirmation field is not required, so you can ommit it if you like. Keep in mind all the rails conventions for the &lt;a href="http://apidock.com/rails/ActionView/Helpers/FormHelper/form_for"&gt;form builder&lt;/a&gt;. Our form will send its parameters wrapped in a hash table called &amp;ldquo;user&amp;rdquo; to the &amp;ldquo;/users&amp;rdquo; url using the post method. (We have already defined this route in routes.rb)&lt;/p&gt;

&lt;h3&gt;Step 7 - Receive the form parameters =&amp;gt; create action&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;users_controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
      &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="s1"&gt;'/'' # after signup redirect to root page
    else
      redirect_to '&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;signup&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;#after failed signup =&amp;gt; redirect to signup page again&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user_params&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_confirmation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First we need to whitelist our user parameters. Then we can use them to actually create a new user in the database. After the user is saved succesfully, we will create a new session cookie (cookie = little piece of information stored in your browser) and store the user_id in it. Rails offers to types of cookies: Session cookies and normal cookies. The only difference between them is the way they are stored. Session cookies are stored encrypted and normal cookies are stored in plain text. You can adjust the code, signup and see the differences in your browser stored cookies.&lt;/p&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="na"&gt;Change&lt;/span&gt; &lt;span class="na"&gt;cookie&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt; &lt;span class="na"&gt;--&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  def create
    user = User.new(user_params)
    if user.save
      cookie[:user_id] = user.id
      redirect_to `/`
    else
      redirect_to '/signup'
    end
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Step 8 - Install bycrypt gem&lt;/h3&gt;

&lt;p&gt;Usally the bycrypt gem is just commented out. So uncomment or add this line:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="no"&gt;Use&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt; &lt;span class="n"&gt;has_secure_password&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'bcrypt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~&amp;gt; 3.1.7'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After you have added the line install the gem with&lt;/p&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Step 9 - User Model (where the magic happens)&lt;/h3&gt;

&lt;p&gt;I want to cover the core principles of authentification in this post. That&amp;rsquo;s why I won&amp;rsquo;t add any constraints like checking for duplicated email addresses or a required password length.  &lt;/p&gt;

&lt;p&gt;Here we just need to add &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;

  &lt;span class="n"&gt;has_secure_password&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What has happend here? The method &amp;ldquo;has&lt;em&gt;secure&lt;/em&gt;password&amp;rdquo; basically compares our user.password and user.password&lt;em&gt;confirmation, creates a hash of our password and stores it inside the attribute password&lt;/em&gt;digest (Step 1).&lt;br&gt;
If you even want to do that on your own, take a look at &lt;a href="http://stackoverflow.com/questions/19173175/rails-how-to-write-your-own-authentication-without-using-has-secure-password"&gt;this&lt;/a&gt; post on stackoverflow. &lt;/p&gt;

&lt;h3&gt;Step 10 - Create the sessions controller&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sessions_controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SessionsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="c1"&gt;#login form&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt; &lt;span class="c1"&gt;#login action&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;destroy&lt;/span&gt; &lt;span class="c1"&gt;#logout action&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Step 11 - Create the login form&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sessions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kp"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;erb&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="no"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;

&amp;lt;%= form_tag '/&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="sx"&gt;%&amp;gt;
  Email: &amp;lt;%= text_field_tag :email %&amp;gt;&lt;/span&gt;
  &lt;span class="no"&gt;Password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;%= password_field_tag :password %&amp;gt;
  &amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;submit_tag&lt;/span&gt; &lt;span class="s2"&gt;"Submit"&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;% end &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Step 12 - Add the new login/logout routes&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'users#new'&lt;/span&gt;

  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/login'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'sessions#new'&lt;/span&gt; &lt;span class="c1"&gt;#send login form&lt;/span&gt;
  &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s1"&gt;'/login'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'sessions#create'&lt;/span&gt; &lt;span class="c1"&gt;#receive login form&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/logout'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'sessions#destroy'&lt;/span&gt; &lt;span class="c1"&gt;#logout&lt;/span&gt;

  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/signup'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'users#new'&lt;/span&gt;
  &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s1"&gt;'/users'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'users#create'&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Step 13 - Add the login and logout logic&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sessions_controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SessionsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="c1"&gt;#If user exists AND password is entered correctly&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="c1"&gt;#Store user id in a brwoser cookie&lt;/span&gt;
      &lt;span class="c1"&gt;#This is how we will keep the user logged in while he can navigate on our site&lt;/span&gt;
      &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="c1"&gt;#Login failed =&amp;gt; back to login form&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="s1"&gt;'/login'&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;destroy&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="s1"&gt;'/login'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Step 14 - Check if user is logged in&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;application_controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="c1"&gt;# Prevent CSRF attacks by raising an exception.&lt;/span&gt;
  &lt;span class="c1"&gt;# For APIs, you may want to use :null_session instead.&lt;/span&gt;
  &lt;span class="n"&gt;protect_from_forgery&lt;/span&gt; &lt;span class="ss"&gt;with: :exception&lt;/span&gt;

  &lt;span class="c1"&gt;# returns current_user if it already exists or looks if there is a session_cookie with the correct value and assigns current_user afterwards&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_user&lt;/span&gt;
    &lt;span class="vi"&gt;@current_user&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;helper_method&lt;/span&gt; &lt;span class="ss"&gt;:current_user&lt;/span&gt; &lt;span class="c1"&gt;#to make the method available in our views&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authorize&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="s1"&gt;'/login'&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have also included three lines of authorization here. Otherwise there is no sense in loggin in.&lt;/p&gt;

&lt;h3&gt;Step 15 - Setup our top secret page&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="no"&gt;Pages&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;erb&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="no"&gt;Top&lt;/span&gt; &lt;span class="no"&gt;Secret&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;

&amp;lt;h2&amp;gt;Hallo &amp;lt;%= @current_user.name %&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update the route.rb&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'pages#secret'&lt;/span&gt;

  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/secret'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'pages#secret'&lt;/span&gt;

  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/login'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'sessions#new'&lt;/span&gt;
  &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s1"&gt;'/login'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'sessions#create'&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/logout'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'sessions#destroy'&lt;/span&gt;


  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/signup'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'users#new'&lt;/span&gt;
  &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s1"&gt;'/users'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'users#create'&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No we can determine who will be allowed to access our top secret page.&lt;/p&gt;

&lt;h3&gt;Step 16 - Authorize all succeessfully logged in users to see the page&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;--&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pages_controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PagesController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="n"&gt;before_filter&lt;/span&gt; &lt;span class="ss"&gt;:authorize&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;secret&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before our server will execute the secret action (and send the top secret site to our client&amp;rsquo;s browser) the authorize method is called. As we have seen in Step 13, the authorize mehtod checks if the user is logged in, otherwise it redirects the user to the login page.&lt;/p&gt;

&lt;h2&gt;What&amp;rsquo;s missing?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All sorts of validations on the user model level&lt;/li&gt;
&lt;li&gt;Confirmation email&lt;/li&gt;
&lt;li&gt;All sorts of user notifications (e.g. failed login)&lt;/li&gt;
&lt;li&gt;remember-me function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Authentification in action&lt;/h2&gt;

&lt;p&gt;Quality: Vintage style ;)&lt;/p&gt;

&lt;p&gt;&lt;img alt="demo" width="640" height="284" src="/images/authentification_demo-ab116e7b.gif" /&gt;&lt;/p&gt;

&lt;h2&gt;Gems vs code from scratch&lt;/h2&gt;

&lt;p&gt;It is definitely helpful to knwo how to implement user authentification by only using bycrypt or even completly from scratch. However it is quite boring to do it again and again for every single app. Therefore you will create a gem for it. Now it&amp;rsquo;s up to you, if you want to maintain your own authentification gem or if you want other people to do it for you.  &lt;/p&gt;

&lt;p&gt;Here is a short list of interesting gems:&lt;br&gt;
- &lt;a href="https://github.com/plataformatec/devise"&gt;device&lt;/a&gt; (authentification)&lt;br&gt;
- &lt;a href="https://github.com/thoughtbot/clearance"&gt;clearance&lt;/a&gt; (authentification)&lt;br&gt;
- &lt;a href="https://github.com/CanCanCommunity/cancancan"&gt;cancancan&lt;/a&gt; (authorication)&lt;br&gt;
- &lt;a href="https://github.com/elabs/pundit"&gt;pundit&lt;/a&gt; (authorication)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>UWater - Microcontroller project</title>
    <link rel="alternate" href="http://blog.url.com/uwater.html"/>
    <id>http://blog.url.com/uwater.html</id>
    <published>2016-04-28T11:12:00+02:00</published>
    <updated>2016-05-29T03:10:30+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;UWater - Microcontroller project&lt;/h1&gt;

&lt;p&gt;&lt;img alt="uwater-setup" width="750" height="1000" src="/images/uwater_setup-34d8d191.png" /&gt;&lt;/p&gt;

&lt;h2&gt;How did I end up building UWater?&lt;/h2&gt;

&lt;p&gt;During my senior year in high school I saw an article in the newspaper by our famous &lt;a href="http://www.iis.fraunhofer.de/en.html"&gt;Fraunhofer Institut&lt;/a&gt; (Applied Science Institut).&lt;/p&gt;

&lt;p&gt;&lt;img alt="iis_logo" width="600" height="170" src="/images/uwater_iis_logo-3731def0.png" /&gt;&lt;/p&gt;

&lt;p&gt;They were looking for students for an embedded systems internship with a competition at the end. I applied immediatley and got in.  &lt;/p&gt;

&lt;p&gt;They gave us a &lt;a href="http://www.nxp.com/pages/usb-mini-board-for-freescales-low-end-8-bit-microcontrollers:USBSPYDER08"&gt;dev board&lt;/a&gt; (USB Spyder08 from freescale) with several introduction sessions. We basically came in on weekends and they showed us the basics by buidling some sample projects. &lt;/p&gt;

&lt;p&gt;After the initial training persiod we should come up with our own idea and build it during the next 9 months. After these nine months we all came back together again and they judged our projects.&lt;/p&gt;

&lt;h2&gt;What actually is UWater?&lt;/h2&gt;

&lt;p&gt;UWater is a system which takes care that your plants get enough water while you are on vacation.&lt;/p&gt;

&lt;h2&gt;How does UWater work?&lt;/h2&gt;

&lt;p&gt;UWater meassures the degree of humidity in the earth of the plant pot by using the ressistance between two nails which are put into the plant pot. The higher the ressistance, the lower the degree of humidity of the earth in the plant pot is.
With that knowledge UWater controls a little water pump to fill water in the plant pot and increase the degree of humidity again.&lt;br&gt;
The concept is really basic - but it works surprisingly well.&lt;br&gt;
The hardest part was to adjust the scale for the degree of humidity and figuring out how to control the water pump.&lt;br&gt;
It was an honor to present my project at one of their exhibitions!
![uwater&lt;em&gt;presentation]!(images/uwater&lt;/em&gt;presentation.png)&lt;/p&gt;

&lt;p&gt;&amp;hellip;. at the end I won the first price! &lt;i class="fa fa-birthday-cake"&gt;&lt;/i&gt;&lt;/p&gt;

&lt;h2&gt;What did I do next?&lt;/h2&gt;

&lt;p&gt;After I won the first price, I got a job offer as a working student.&lt;br&gt;
I accepted and spent about 1.5 year working on microcontroller projects with similiar hardware I had already used.&lt;br&gt;
At the end my learning curve decreased and I left for a startup!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>My Personal Blog</title>
    <link rel="alternate" href="http://blog.url.com/personal-blog.html"/>
    <id>http://blog.url.com/personal-blog.html</id>
    <published>2016-04-28T11:12:00+02:00</published>
    <updated>2016-05-29T03:10:13+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;My Personal Blog&lt;/h1&gt;

&lt;p&gt;During my internship in New York City I realized &amp;ldquo;Dude - You need a blog!&amp;rdquo;.&lt;/p&gt;

&lt;h2&gt;What messages do I want to convey with my Blog?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Efficiency is important to him&lt;br&gt;
No wordpress overhead; only the important bootstrap components  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free domain from a hackathon&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Minimalistic and clean design&lt;br&gt;&lt;/li&gt;
&lt;li&gt;No delays&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This guy is into tech (articles/projects)&lt;br&gt;
Hire/Refer/Work with him &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Startups are his passion (articles/projects)&lt;br&gt;
Hire/Refer/Work with him&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Out of the box thinker (articles)&lt;br&gt;
Get coffee with him&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Development Process&lt;/h2&gt;

&lt;p&gt;First I did some research by looking at all the blogs of my hackathon friends.  &lt;/p&gt;

&lt;p&gt;Here is a short list:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.simeon.io/"&gt;Simeon Videnov&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://cyrusroshan.com"&gt;Cyrus Roshan&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://itsmrlin.com"&gt;Zhiyuan Lin&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.christopherjwang.info"&gt;Christopher Wang&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://ethansinjin.com"&gt;Ethan Gill&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://jacobkahn.me"&gt;Jacob Kahn&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://pwu.me"&gt;Pine Wu&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://tehjawn.github.io/mygithubpage/"&gt;John Nguyen&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.sandile.io"&gt;Sandile Keswa&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I got a rough picture what is possible and how to structure a personal website. &lt;/p&gt;

&lt;p&gt;Finally I saw german guy on &lt;a href="https://twitter.com/ivomynttinen"&gt;twitter&lt;/a&gt; who had been living in Thailand (like me right now!) before he started a job at a startup in LA. His website was just awesome - I was stunned! Then I looked at his code and everything was so clean!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Good artists copy; great artists steal&amp;rdquo;
&lt;strong&gt;Steve Jobs&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am still a novice developer, so I thought well copying the elements you like is okay ;-)&lt;/p&gt;

&lt;h2&gt;Version 1 was born&lt;/h2&gt;

&lt;p&gt;&lt;img alt="blog_v1_index" width="1249" height="869" src="/images/blog_v1_index-b1adf3fa.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="blog_v1_index" width="1249" height="869" src="/images/blog_v1_footer-af7606f7.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="blog_v1_index" width="1249" height="869" src="/images/blog_v1_projects-2836cdc4.png" /&gt;&lt;/p&gt;

&lt;p&gt;When I finished the first version, I was definitely proud of myself.
However I quickly realized that this structure was not the right one for me. I didn&amp;rsquo;t like user flow (too complicated) and the focus was different. He designed his website to get paying clients for his freelance work. My goals are different.&lt;/p&gt;

&lt;h2&gt;Version 2 - Restart&lt;/h2&gt;

&lt;p&gt;I did some more research and started again.&lt;/p&gt;

&lt;p&gt;&lt;img alt="blog_v2_index" width="1374" height="946" src="/images/blog_v2_index-8102b8a0.png" /&gt;&lt;/p&gt;

&lt;p&gt;This version is even more minimalistic. So far I still like it. I guess that&amp;rsquo;s an important point. If you do not like your website you probably won&amp;rsquo;t post as much.&lt;/p&gt;

&lt;h3&gt;What kind of setup do I use?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;u&gt;Backend:&lt;/u&gt; Ruby on Rails&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;u&gt;Frontend:&lt;/u&gt; Bootstrap (only required components), no JS so far&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;u&gt;Domain:&lt;/u&gt; Free .co domain from a Hackathon&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;u&gt;Hoster:&lt;/u&gt; Heroku&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;u&gt;Version Control:&lt;/u&gt; Git&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;u&gt;Text Editor:&lt;/u&gt; Sublime Text 2&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;u&gt;Computer:&lt;/u&gt; Mac book Air (2014) without external mouse or keyboard &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Version 3 - Static site&lt;/h2&gt;

&lt;p&gt;Recently I did some more changes under the hood. I switched from Rails to the static site generator &lt;a href="https://middlemanapp.com"&gt;Middleman&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>MakeItHappen</title>
    <link rel="alternate" href="http://blog.url.com/make-it-happen.html"/>
    <id>http://blog.url.com/make-it-happen.html</id>
    <published>2016-04-28T11:12:00+02:00</published>
    <updated>2016-06-12T20:08:53+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;MakeItHappen - Hackathon Cornell University&lt;/h1&gt;

&lt;p&gt;Right at the beginning of my internship in New York City, I got involved with Hackathons. Before that I didn&amp;rsquo;t even know that they exist. BigRedHacks at Cornell University was my second Hackathon ever. 
I really &lt;i class="fa fa-heart"&gt;&lt;/i&gt; Hackathons!  You always improve your skills and get to know awesome people!  Try it even you can&amp;rsquo;t code, I promise you will learn a ton!  &lt;/p&gt;

&lt;p&gt;Let me introduce you to TEAM AWESOME&amp;hellip; (I am the guy on the right)&lt;/p&gt;

&lt;p&gt;&lt;img alt="team" width="1000" height="375" src="/images/makeithappen_team-73317bf4.png" /&gt;&lt;/p&gt;

&lt;h2&gt;What did we end up building?&lt;/h2&gt;

&lt;p&gt;Michael (my partner) and me, we built a rails app called &amp;ldquo;makeithappen&amp;rdquo;. The idea for our app was inspired by the refugee crisis going on in Europe. We wanted to help!  &lt;/p&gt;

&lt;p&gt;MakeItHappen is platform which simplifies the donation process. Let&amp;rsquo;s imagine there is a person A in Germany who wants to donate clothes but is too lazy to actually take the clothes to an official donation station. Ok that sucks! Then there is another person B from anywhere in the world who feels deeply touched by the pictures in the news and wants to donate money. Our platform brings brings these two persons together.&lt;br&gt;
Person A can donate an item by inserting all relevant information (including the address). Person B then can see a list of donated items and can press the button &amp;ldquo;MakeItHappen&amp;rdquo;. Person B will then donate the amount of money which is needed to pay for an UBER to pick up the clothes and take them to an official donation station. Problem solved and everybody is satisfied - including the refugees!&lt;/p&gt;

&lt;h2&gt;What did actually work at the end?&lt;/h2&gt;

&lt;p&gt;Here you can see our rails app.
      &lt;img alt="index" width="1430" height="911" src="/images/makeithappen_index-ba296d66.png" /&gt;&lt;/p&gt;

&lt;p&gt;At the end Person A could insert a donation item. We then used the google API to calculate the exact coordinates of the address of Person A and the ONE AND ONLY donation station in Munich hahaha ;-) Then we fed the UBER API with these coordinates and calculated the price for trip. Person B could see a list of all donated items and their estimated prices to get them to the donation station.  &lt;/p&gt;

&lt;p&gt;As we were both rails beginners, we were pretty proud of our results!&lt;/p&gt;

&lt;h2&gt;Woop and we won a price!&lt;/h2&gt;

&lt;p&gt;We both couldn&amp;rsquo;t believe it, but it really happened!&lt;br&gt;
We were second in the category &amp;ldquo;Best use of UBER API&amp;rdquo;.
&lt;img alt="winner" width="1552" height="892" src="/images/makeithappen_winner-d6e33314.png" /&gt;&lt;/p&gt;

&lt;p&gt;At a hackathon you have to cheat a little bit in the presentation.&lt;br&gt;
For example we ran out of time to actually develop a signup/login system. So our login button always &amp;ldquo;worked&amp;rdquo;. It didn&amp;rsquo;t matter which data you put in. Our second limitation was the special ONE AND ONLY donation station in Munich. All items should be delivered to this station whether they were donated in Munich or in Berlin. That of course doens&amp;rsquo;t make sense! In our presentation we picked a person who lives in Munich of course ;-)&lt;/p&gt;

&lt;h2&gt;What did we learn?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Hackathons are fun - So have fun!&lt;br&gt;
Don&amp;rsquo;t get to serious about your project and forget to have fun!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Hackathon without preparation is a lost Hackathon&lt;br&gt;
OK that&amp;rsquo;s not true. Only a Hackathon where you did&amp;rsquo;t show up is a lost Hackathon. With that being said, the preparation we did before helped us a lot to get started. For example we discussed our git workflow before (at the end it was a mess, but at the beginning everything was clean) as well as the version of rails we wanted to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get something done - it doens&amp;rsquo;t matter how bad it is&lt;br&gt;
I always see guys at Hackathons who spend the whole time with brainstoarming and starting again and again. They end up learning not much. Fuck it and just build something. Nobody will judge you!  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Bayern SU - Wordpress site</title>
    <link rel="alternate" href="http://blog.url.com/bayern-su.html"/>
    <id>http://blog.url.com/bayern-su.html</id>
    <published>2016-04-28T11:12:00+02:00</published>
    <updated>2016-05-29T03:10:50+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Website for the political youth orginazation of the CSU&lt;/h1&gt;

&lt;h2&gt;General information about the project&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;u&gt;What:&lt;/u&gt; Wordpress site for a political youth organization of a german party (~ 1000 members)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;u&gt;Time frame:&lt;/u&gt; Several months in 2014&lt;/li&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;u&gt;Cost:&lt;/u&gt; I am part of that orgnization, so I did it for free ;-)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Every member of the executive board with the right permission can post articles.&lt;br&gt;
I used a simple wordpress plugin to do the member management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable new members to sign up online&lt;br&gt;
Pupils who want to join our organization can now apply online instead of mailing us a print out.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="bayernsu_application" width="1552" height="869" src="/images/bayernsu_application-670663db.png" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meet a student of your favorite university&lt;br&gt;
Visitors of our site can request a meeting with a student of our network who attends their favorite university.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="bayernsu_university" width="1552" height="869" src="/images/bayernsu_university-ccd8ff5d.png" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find our local group close to your home&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="bayernsu_localization" width="1552" height="869" src="/images/bayernsu_localization-76296fc9.png" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Included an RSS Feed of important government sites&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modern and professional design&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="bayernsu_index" width="1552" height="869" src="/images/bayernsu_index-fb3ecbf1.png" /&gt;&lt;/p&gt;

&lt;h2&gt;What did I learn?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Communication with a big democratic orgnaization is time consuming&lt;br&gt;
The executive board of the youth organization only gets together around 8 times per year. Mayor changes (like a new way for people to become a member) need to be discussed with the entire group. Sometimes that was really frustrating.  &lt;/p&gt;

&lt;p&gt;&lt;i class="fa fa-lightbulb-o fa-2x"&gt;&lt;/i&gt; Tip @freelancers&lt;br&gt;
Take on projects only with one single responsible person who is also in charge of the budget!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A solid plan saves you a lot of time and trouble&lt;br&gt;
That sounds abvious, but we forget about way too often. I had no idea which features I wanted to implement and when I wanted to be finished with the project. Hell yeah it was my first web project ever.&lt;br&gt;
I would highly recommend sketch out all your features first on paper or with a simple tool like Sketch, get a buy in from all responsible parties and THEN start coding.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It took way longer than I thought&lt;br&gt;
I have never done a web project before, but I thought it&amp;rsquo;s not real programming it&amp;rsquo;s just wordpress&amp;hellip; Oh  my god was I wrong. At the end I had to modify plugins which took years as I didn&amp;rsquo;t know php either.  &lt;/p&gt;

&lt;p&gt;&lt;i class="fa fa-lightbulb-o fa-2x"&gt;&lt;/i&gt; Tip &lt;br&gt; Look at your schedule for the next weeks/months if you have enough time for your project!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adverse circumstances made me procrastinate on the project&lt;br&gt;
At some point I was not happy with the code implementation, so I refused to finish this particular feature and instead started another one. Then I was not pleased by visual appearance and switched to back to the other feature. At the end it was kind of mess and it took me way more energy to really finish a feature.  &lt;/p&gt;

&lt;p&gt;&lt;i class="fa fa-lightbulb-o fa-2x"&gt;&lt;/i&gt; Tip &lt;br&gt;Get things done as quickly as possible and then just iterate!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t start coding without a final agreement&lt;br&gt;
This issue is related to my approach to start working without a real plan. I mean of course I made notes on a paper first, but that was by far not detailed enough. Finally I ended up developing a feature and then getting the feedback that nobody needs it or even worse we can&amp;rsquo;t use it for other reasons and I need to remove.  &lt;/p&gt;

&lt;p&gt;&lt;i class="fa fa-lightbulb-o fa-2x"&gt;&lt;/i&gt; Tip &lt;br&gt; Use the startup approach and always get feedback before you actually start building a feature/product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I didn&amp;rsquo;t use version control&amp;hellip;&lt;br&gt;
At that point I didn&amp;rsquo;t know that git exists and that it&amp;rsquo;s that easy. So I developed version v0.9 then v0.95 followed by v1.0, then v1.05, went back to v0.95 and continued with v2.0. It was a total mess&amp;hellip;  &lt;/p&gt;

&lt;p&gt;&lt;i class="fa fa-lightbulb-o fa-2x"&gt;&lt;/i&gt; Tip &lt;br&gt;Use version control early on. Check out my articles on how to learn git and my personal git workflow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the beginning I had no idea&amp;hellip;now I am developing rails apps&lt;br&gt;
I had worked for a german science institut on some microcontroller projects before I started working on this wordpress project. You can say I had NO IDEA what I was doing. You can learn a lot on the way. I just googled, stackoverflowed and youtubed a lot. At the end I had a pretty decent knowledge about wordpress.  &lt;/p&gt;

&lt;p&gt;&lt;i class="fa fa-lightbulb-o fa-2x"&gt;&lt;/i&gt; Tip &lt;br&gt;Make bold moves and just try it even if you are not 100% certain if you can make it! Leave your comfort zone!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating stuff is way more fun than consuming&lt;br&gt;
This goes especially to all my friends in Germnay. Creating stuff is so much fun in particular when other people give you feedback. It doesn&amp;rsquo;t matter if you build a company or just feed your facebook timeline with interesting content. As long as you get feedback - you will have fun.  &lt;/p&gt;

&lt;p&gt;&lt;i class="fa fa-lightbulb-o fa-2x"&gt;&lt;/i&gt; Tip  &lt;/p&gt;

&lt;h1&gt;1 Start being a creator instead of a consumer!&lt;/h1&gt;

&lt;h1&gt;2 You can start right now and share some details about my awesome blog ;-)&lt;/h1&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
</feed>
